import logging
from telegram.ext import Application, MessageHandler, filters, CommandHandler, ConversationHandler
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from random import choice
import os
import sys
import requests
from scripts import db_session
from scripts.user import User
from scripts.date_user import Date_user
from scripts.money_user import Money_user

# user = User()
# user.name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1"
# user.about = "–±–∏–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1"
# user.email = "email@email.ru"
# db_sess = db_session.create_session()
# db_sess.add(user)
# db_sess.commit()


BOT_TOKEN = "6738472088:AAEoKitKwg6ACoomXgppzp3IQpXd43zMDgA"
find_city = ['–º–æ—Å–∫–≤–∞', '–æ–¥–∏–Ω—Ü–æ–≤–æ', '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥', '–≤–µ–ª–∏–∫–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥', '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥', '–∫–æ—Å—Ç—Ä–æ–º–∞', '–∫–∏—Ä–æ–≤',
             '—Å–æ—á–∏', '–ø–∞—Ä–∏–∂', '–≤–µ–Ω–∞',
             '–∞–Ω–∞–ø–∞', '–∫–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥', '–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '—Ä—è–∑–∞–Ω—å', '–∫–∞–∑–∞–Ω—å', '–ø—Å–∫–æ–≤', '—Ä–∏–º', '–∏–∑–±–æ—Ä—Å–∫', '–ª–æ—Å-–∞–Ω–¥–∂–µ–ª–µ—Å',
             '–Ω—å—é-–π–æ—Ä–∫', '–ª–æ–Ω–¥–æ–Ω', '–º–∞—Ä—Å–µ–ª—å', '—Å—Ç–æ–∫–≥–æ–ª—å–º', '–∫—Ä—ã–º', '—Å–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å', '–º–µ–∫—Å–∏–∫–∞', '–∫–∏—Ç–∞–π', '—è–ø–æ–Ω–∏—è', '—Ç—É–ª–∞',
             '—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É', '–ø–µ–∫–∏–Ω', '–æ—Ä–ª–∞–Ω–¥–æ', '–º–∞–¥—Ä–∏–¥', '–≤–µ–Ω–µ—Ü–∏—è', '–º–∏–ª–∞–Ω', '–±–∞—Ä—Å–µ–ª–æ–Ω–∞']
logging.basicConfig(filename='example2.log',
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG)
logger = logging.getLogger(__name__)
list_for_joke = ['A', '12', '24.04.24']

reply_keyboard = [['–î–∞', '–ù–µ—Ç']]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)

casino1_keyboard = [['50', '10', '100'], ['30', '5', '200'], ['70', '600', '20']]
markup1 = ReplyKeyboardMarkup(casino1_keyboard, one_time_keyboard=False)

db_session.global_init("db/bot.db")
dbs = db_session.create_session()
dbs.commit()


async def start(update, context):
    chat_id = update.effective_message.chat_id
    await context.bot.send_photo(chat_id, 'data/orig.webp', reply_markup=ReplyKeyboardRemove(),
                                 caption=f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç!\n–Ø –ù–∞–ø–∏—à–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é")
    user = update.effective_user
    db_sess = db_session.create_session()
    user1 = db_sess.query(User).filter(User.user_id == update.message.chat.id).first()
    if not user1:
        user = User()
        user.user_id = update.message.chat.id
        if update.message.chat.username:
            user.username = update.message.chat.username
        db_sess.add(user)
        money = Money_user(user_id=update.message.chat.id, money=0)
        db_sess.add(money)
        user = Date_user()
        user.name = update.message.chat.first_name
        user.user_id = update.message.chat.id
        if update.message.chat.last_name:
            user.surname = update.message.chat.last_name
        else:
            user.surname = ''
        db_sess.add(user)
        db_sess.commit()
    else:
        print(user1.surname)
        if not user1.surname:
            user1.surname = ''
            print(user1.surname)
        elif update.message.chat.last_name != user1.surname:
            user1.surname = update.message.chat.last_name
        elif update.message.chat.username != user1.username:
            user1.username = update.message.chat.username
        db_sess.commit()

    # await context.bot.forward_message(chat_id, '-4199349308', update.message.message_id)
    # await update.message.reply_html(
    # rf"–ü—Ä–∏–≤–µ—Ç {user.mention_html()}! –Ø –±–æ—Ç! –ù–∞–ø–∏—à–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é")


async def echo(update, context):
    await update.message.reply_text(
        f'–Ø –Ω–µ –ø–æ–Ω—è–ª —Ç–≤–æ—é –∫–æ–º–∞–Ω–¥—É "{update.message.text}", –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç\n(–Ω–∞–ø–∏—à–∏ /stop, –∞ –∑–∞—Ç–µ–º /start)\n'
        f'–∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É\n'
        f'(–ø—Ä–æ—Å–ª–µ–¥–∏ –∑–∞ –∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å—é –Ω–∞–ø–∏—Å–∞–Ω–∏—è).\n–ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É\n/help, –Ω–∞–¥–µ—é—Å—å –æ–Ω–∞ —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç.')


async def help_command(update, context):
    await update.message.reply_text(
        "–Ø –Ω–µ —É–º–µ—é –ø–æ–º–æ–≥–∞—Ç—å,\n–ò –≤ —Ç–æ–º –ø—Ä–∏–∑–Ω–∞—Ç—å—Å—è –Ω–µ –±–æ—é—Å—å,\n–ù–æ, —á—Ç–æ–±—ã –≤—Ä–µ–º—è –Ω–µ —Ç–µ—Ä—è—Ç—å,\n–Ø –ø–æ–º–æ–≥–∞—Ç—å —É—á—É—Å—å.\n–ò –ø—É—Å—Ç—å –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–æ–∫–∞,\n–ù–æ —è —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ –Ω–µ —Å–¥–∞—é—Å—å,\n–Ø –Ω–∞—É—á—É—Å—å –Ω–∞–≤–µ—Ä–Ω—è–∫–∞.\n–ú–æ–≥—É –¥–∞—Ç—å —Å–ª–æ–≤–æ, —Ç–æ–ª—å–∫–æ –ø–æ–ø—Ä–æ—Å–∏...")


async def reader_find(update, context):
    chat_id = update.effective_message.chat_id
    city = context.user_data['city']
    print(update.message.text.strip().lower(), city)
    if update.message.text.lower() == city:
        await update.message.reply_text(f"–î–∞, —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ª—É—á–∏ 50ü™ô\n"
                                        f"–•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup=markup)

        db_sess = db_session.create_session()
        for money in db_sess.query(Money_user).filter(Money_user.user_id == update.message.chat.id):
            money.money += 50
        db_sess.commit()
    else:
        await update.message.reply_text(f"–≠—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, —ç—Ç–æ {city.capitalize()}\n"
                                        f"–•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup=markup)
    return 1


async def find(update, context):
    chat_id = update.effective_message.chat_id
    if update.message.text == "/find":
        await update.message.reply_text("–û—Ç–≥–∞–¥–∞–π –≥–æ—Ä–æ–¥–∞. –Ø –±—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≥–æ—Ä–æ–¥, –∞ —Ç—ã –ø–∏—à–∏ –º–Ω–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ")
    if update.message.text in ["–î–∞", "/find"]:
        city = choice(find_city)
        context.user_data['city'] = city
        print(city)
        await context.bot.send_photo(chat_id, f'data/{city}.jpg', reply_markup=ReplyKeyboardRemove(),
                                     caption='–ß—Ç–æ —ç—Ç–æ –∑–∞ –≥–æ—Ä–æ–¥?')
        print('–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
        return 2
    else:
        await update.message.reply_text("–ü–æ–∫–∞, –∂–¥–µ–º –≤ –≥–æ—Å—Ç–∏! –í—ã–∑—ã–≤–∞–π –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É, –∫–∞–∫ –ø–æ–Ω–∞–¥–æ–±–ª—é—Å—å",
                                        reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END


async def money(update, context):
    db_sess = db_session.create_session()
    for money in db_sess.query(Money_user).filter(Money_user.user_id == update.message.chat.id):
        await update.message.reply_text(money.money)


async def casino(update, context):
    db_sess = db_session.create_session()
    for money in db_sess.query(Money_user).filter(Money_user.user_id == update.message.chat.id):
        if money.money > 0:
            if update.message.text in ["–î–∞", "/casino"]:
                await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É",
                                                reply_markup=markup1)
    if update.message.text not in ["–î–∞", "/casino"]:
        await update.message.reply_text(
            f'–Ø –Ω–µ –ø–æ–Ω—è–ª —Ç–≤–æ—é –∫–æ–º–∞–Ω–¥—É "{update.message.text}", –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç\n(–Ω–∞–ø–∏—à–∏ /stop, –∞ –∑–∞—Ç–µ–º /start)\n'
            f'–∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É\n'
            f'(–ø—Ä–æ—Å–ª–µ–¥–∏ –∑–∞ –∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å—é –Ω–∞–ø–∏—Å–∞–Ω–∏—è).\n–ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É\n/help (–ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞), \n–Ω–∞–¥–µ—é—Å—å –æ–Ω–∞ —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç.')
    return 4


async def casino2(update, context):
    db_sess = db_session.create_session()
    text = update.message.text
    comand = choice(['1', '2'])
    if text:
        if comand == '1':
            for money in db_sess.query(Money_user).filter(Money_user.user_id == update.message.chat.id):
                money.money += 1
                money.money *= int(text)
            await update.message.reply_text(f"–¢—ã –≤–µ–∑—É—á–∏–π. –¢–≤–æ–∏ –¥–µ–Ω—å–≥–∏ —É–≤–µ–ª–∏—á–∏–ª–∏—Å—å –≤ {text} —Ä–∞–∑\n"
                                            f"–•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É –≤ –∫–∞–∑–∏–Ω–æ? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup=markup)
        else:
            for money in db_sess.query(Money_user).filter(Money_user.user_id == update.message.chat.id):
                money.money //= int(text)
            await update.message.reply_text(f"–ù—É, —á—Ç–æ –∂, –Ω–µ –ø–æ–≤–µ–∑–ª–æ. –¢–≤–æ–∏ –¥–µ–Ω—å–≥–∏ —É–º–µ–Ω—å—à–∏–ª–∏—Å—å –≤ {text} —Ä–∞–∑\n"
                                            f"–•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup=markup)
        db_sess.commit()
    return 3


async def joke(update, context):
    if update.message.text in ['–î–∞', '/joke']:
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∞–∫—Ü–∏–æ–Ω–Ω–µ—Ä–Ω—ã–π –∫–æ–¥:')
    else:
        await update.message.reply_text("–ü–æ–∫–∞, –∂–¥–µ–º –≤ –≥–æ—Å—Ç–∏! –í—ã–∑—ã–≤–∞–π –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É, –∫–∞–∫ –ø–æ–Ω–∞–¥–æ–±–ª—é—Å—å",
                                        reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    return 6


async def joke2(update, context):
    if update.message.text in list_for_joke:
        db_sess = db_session.create_session()
        for money in db_sess.query(Money_user).filter(Money_user.user_id == update.message.chat.id):
            money.money += 50
        db_sess.commit()
        await update.message.reply_text(f"–¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Å–≤–æ–π –∫—É–ø–æ–Ω –∏ –ø–æ–ª—É—á–∏–ª 50ü™ô\n"
                                            f"–•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±–Ω–∞–ª–∏—á–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∫–æ–¥—ã? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup=markup)
    else:
        await update.message.reply_text(f"–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –∫–æ–¥–∞\n"
                                            f"–•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±–Ω–∞–ª–∏—á–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∫–æ–¥—ã? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup=markup)
    return 5


async def finding_city(update, context):
    if update.message.text in ["–î–∞", "/finding_city"]:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –º–Ω–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞, –∞ —è –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –µ–≥–æ –Ω–∞ –∫–∞—Ä—Ç–µ")
        return 8
    else:
        await update.message.reply_text("–ü–æ–∫–∞, –∂–¥–µ–º –≤ –≥–æ—Å—Ç–∏! –í—ã–∑—ã–≤–∞–π –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É, –∫–∞–∫ –ø–æ–Ω–∞–¥–æ–±–ª—é—Å—å",
                                        reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END


async def finding_city2(update, context):
    chat_id = update.effective_message.chat_id
    if update.message.text:
        places = update.message.text
        map_request = f"https://static-maps.yandex.ru/1.x/?l=map&ll={places}&spn=1.000,1.000&l=map"
        response = requests.get(map_request)
        if not response:
            print("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:")
            print(map_request)
            print("Http —Å—Ç–∞—Ç—É—Å:", response.status_code, "(", response.reason, ")")
            sys.exit(1)
        map_file = f"map.png"
        with open(map_file, "wb") as file:
            file.write(response.content)
        await context.bot.send_photo(chat_id, f'map.png', caption="–•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É",
                                     reply_markup=markup)
        return 7


async def stop(update, context):
    await update.message.reply_text("–ü–æ–∫–∞, –∂–¥–µ–º –≤ –≥–æ—Å—Ç–∏! –í—ã–∑—ã–≤–∞–π –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É, –∫–∞–∫ –ø–æ–Ω–∞–¥–æ–±–ª—é—Å—å",
                                    reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


def main():
    app = Application.builder().token(token=BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("money", money))
    app.add_handler(CommandHandler("play", help_command))
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('find', find)],
        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, find)],
            2: [MessageHandler(filters.TEXT & ~filters.COMMAND, reader_find)]
        },
        fallbacks=[CommandHandler('stop', stop)]
    )
    conv_handler1 = ConversationHandler(
        entry_points=[CommandHandler('casino', casino)],
        states={
            3: [MessageHandler(filters.TEXT & ~filters.COMMAND, casino)],
            4: [MessageHandler(filters.TEXT & ~filters.COMMAND, casino2)]
        },
        fallbacks=[CommandHandler('stop', stop)]
    )
    conv_handler2 = ConversationHandler(
        entry_points=[CommandHandler('joke', joke)],
        states={
            5: [MessageHandler(filters.TEXT & ~filters.COMMAND, joke)],
            6: [MessageHandler(filters.TEXT & ~filters.COMMAND, joke2)]
        },
        fallbacks=[CommandHandler('stop', stop)]
    )
    conv_handler3 = ConversationHandler(
        entry_points=[CommandHandler('finding_city', finding_city)],
        states={
            7: [MessageHandler(filters.TEXT & ~filters.COMMAND, finding_city)],
            8: [MessageHandler(filters.TEXT & ~filters.COMMAND, finding_city2)]
        },
        fallbacks=[CommandHandler('stop', stop)]
    )
    app.add_handler(conv_handler)
    app.add_handler(conv_handler1)
    app.add_handler(conv_handler2)
    app.add_handler(conv_handler3)
    text_handler = MessageHandler(filters.TEXT, echo)
    app.add_handler(text_handler)
    app.run_polling()


if __name__ == "__main__":
    main()
