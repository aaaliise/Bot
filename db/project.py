import logging
from telegram.ext import Application, MessageHandler, filters, CommandHandler, ConversationHandler
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from random import choice
from data.user import Table0
from data import db_session
from .db_session import SqlAlchemyBase

user = Table0()
user.name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1"
user.about = "–±–∏–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 1"
user.email = "email@email.ru"
db_sess = db_session.create_session()
db_sess.add(user)
db_sess.commit()


BOT_TOKEN = "6738472088:AAEoKitKwg6ACoomXgppzp3IQpXd43zMDgA"
find_city = ['–º–æ—Å–∫–≤–∞', '–æ–¥–∏–Ω—Ü–æ–≤–æ', '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥', '–≤–µ–ª–∏–∫–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥', '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥', '–∫–æ—Å—Ç—Ä–æ–º–∞', '–∫–∏—Ä–æ–≤',
             '—Å–æ—á–∏', '–ø–∞—Ä–∏–∂', '–≤–µ–Ω–∞',
             '–∞–Ω–∞–ø–∞', '–∫–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥', '–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '—Ä—è–∑–∞–Ω—å', '–∫–∞–∑–∞–Ω—å', '–ø—Å–∫–æ–≤', '—Ä–∏–º', '–∏–∑–±–æ—Ä—Å–∫', '–ª–æ—Å-–∞–Ω–¥–∂–µ–ª–µ—Å',
             '–Ω—å—é-–π–æ—Ä–∫', '–ª–æ–Ω–¥–æ–Ω', '–º–∞—Ä—Å–µ–ª—å', '—Å—Ç–æ–∫–≥–æ–ª—å–º', '–∫—Ä—ã–º', '—Å–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å', '–º–µ–∫—Å–∏–∫–∞', '–∫–∏—Ç–∞–π', '—è–ø–æ–Ω–∏—è', '—Ç—É–ª–∞',
             '—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É', '–ø–µ–∫–∏–Ω', '–æ—Ä–ª–∞–Ω–¥–æ', '–º–∞–¥—Ä–∏–¥', '–≤–µ–Ω–µ—Ü–∏—è', '–º–∏–ª–∞–Ω', '–±–∞—Ä—Å–µ–ª–æ–Ω–∞']
logging.basicConfig(filename='example2.log',
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
                    )

logger = logging.getLogger(__name__)
list_for_joke = ['A', '12', '24.04.24']

reply_keyboard = [['–î–∞', '–ù–µ—Ç']]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)

casino1_keyboard = [['50', '10', '100'], ['30', '5', '200'], ['70', '600', '20']]
markup1 = ReplyKeyboardMarkup(casino1_keyboard, one_time_keyboard=False)


async def start(update, context):
    chat_id = update.effective_message.chat_id
    user = update.effective_user
    await context.bot.send_photo(chat_id, 'data/orig.webp', reply_markup=ReplyKeyboardRemove(), caption=f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç!\n–Ø –ù–∞–ø–∏—à–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é")
    #await context.bot.forward_message(chat_id, '-4199349308', update.message.message_id)
    #await update.message.reply_html(
        #rf"–ü—Ä–∏–≤–µ—Ç {user.mention_html()}! –Ø –±–æ—Ç! –ù–∞–ø–∏—à–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é")


async def echo(update, context):
    await update.message.reply_text(update.message.text)


async def help_command(update, context):
    await update.message.reply_text(
        "–Ø –Ω–µ —É–º–µ—é –ø–æ–º–æ–≥–∞—Ç—å,\n–ò –≤ —Ç–æ–º –ø—Ä–∏–∑–Ω–∞—Ç—å—Å—è –Ω–µ –±–æ—é—Å—å,\n–ù–æ, —á—Ç–æ–±—ã –≤—Ä–µ–º—è –Ω–µ —Ç–µ—Ä—è—Ç—å,\n–Ø –ø–æ–º–æ–≥–∞—Ç—å —É—á—É—Å—å.\n–ò –ø—É—Å—Ç—å –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–æ–∫–∞,\n–ù–æ —è —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ –Ω–µ —Å–¥–∞—é—Å—å,\n–Ø –Ω–∞—É—á—É—Å—å –Ω–∞–≤–µ—Ä–Ω—è–∫–∞.\n–ú–æ–≥—É –¥–∞—Ç—å —Å–ª–æ–≤–æ, —Ç–æ–ª—å–∫–æ –ø–æ–ø—Ä–æ—Å–∏...")


async def reader_find(update, context):
    chat_id = update.effective_message.chat_id
    city = context.user_data['city']
    print(update.message.text.strip().lower(), city)
    if update.message.text.lower() == city:
        await update.message.reply_text(f"–î–∞, —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ª—É—á–∏ 50ü™ô\n"
                                        f"–•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup=markup)

        with open('money.txt', 'rt') as f:
            f = f.read()
        with open('money.txt', 'w') as f1:
            f1.write(str(int(f.strip()) + 50))
    else:
        await update.message.reply_text(f"–≠—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, —ç—Ç–æ {city.capitalize()}\n"
                                        f"–•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup=markup)
    return 1


async def find(update, context):
    chat_id = update.effective_message.chat_id
    if update.message.text == "/find":
        await update.message.reply_text("–û—Ç–≥–∞–¥–∞–π –≥–æ—Ä–æ–¥–∞. –Ø –±—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≥–æ—Ä–æ–¥, –∞ —Ç—ã –ø–∏—à–∏ –º–Ω–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ")
    if update.message.text in ["–î–∞", "/find"]:
        city = choice(find_city)
        context.user_data['city'] = city
        print(city)
        await context.bot.send_photo(chat_id, f'data/{city}.jpg', reply_markup=ReplyKeyboardRemove(), caption='–ß—Ç–æ —ç—Ç–æ –∑–∞ –≥–æ—Ä–æ–¥?')
        print('–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
        return 2
    else:
        await update.message.reply_text("–ü–æ–∫–∞, –∂–¥–µ–º –≤ –≥–æ—Å—Ç–∏! –í—ã–∑—ã–≤–∞–π –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É, –∫–∞–∫ –ø–æ–Ω–∞–¥–æ–±–ª—é—Å—å",
                                        reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END


async def money(update, context):
    with open('money.txt', 'rt') as f:
        f = f.read()
    await update.message.reply_text(f)


async def casino(update, context):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É",
                                    reply_markup=markup1)
    return 4


async def casino2(update, context):
    text = update.message.text
    comand = choice(['1', '2'])
    if text:
        if comand == '1':
            with open('money.txt', 'rt') as f:
                f = f.read()
            with open('money.txt', 'w') as f1:
                f1.write(f'{int(f) * int(text)}')
            await update.message.reply_text(f"–¢—ã –≤–µ–∑—É—á–∏–π. –¢–≤–æ–∏ –¥–µ–Ω—å–≥–∏ —É–≤–µ–ª–∏—á–∏–ª–∏—Å—å –≤ {text} —Ä–∞–∑",
                                            reply_markup=ReplyKeyboardRemove())
        else:
            with open('money.txt', 'rt') as f:
                f = f.read()
            with open('money.txt', 'w') as f1:
                f1.write(f'{int(f) // int(text)}')
            await update.message.reply_text(f"–ù—É, —á—Ç–æ –∂, –Ω–µ –ø–æ–≤–µ–∑–ª–æ. –¢–≤–æ–∏ –¥–µ–Ω—å–≥–∏ —É–º–µ–Ω—å—à–∏–ª–∏—Å—å –≤ {text} —Ä–∞–∑",
                                            reply_markup=ReplyKeyboardRemove())
    return 3


async def music(update, context):
    chat_id = update.effective_message.chat_id
    await context.bot.send_audio(chat_id, 'data/music.mp3')


async def joke(update, context):
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∞–∫—Ü–∏–æ–Ω–Ω–µ—Ä–Ω—ã–π –∫–æ–¥:')
    return 6


async def joke2(update, context):
    if update.message.text in list_for_joke:
        with open('money.txt', 'rt') as f:
            f = f.read()
        with open('money.txt', 'w') as f1:
            f1.write(f'{int(f) + 50}')
        await update.message.reply_text(f"–¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Å–≤–æ–π –∫—É–ø–æ–Ω –∏ –ø–æ–ª—É—á–∏–ª 50ü™ô")
    return 5


async def stop(update, context):
    await update.message.reply_text("–ü–æ–∫–∞, –∂–¥–µ–º –≤ –≥–æ—Å—Ç–∏! –í—ã–∑—ã–≤–∞–π –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É, –∫–∞–∫ –ø–æ–Ω–∞–¥–æ–±–ª—é—Å—å",
                                    reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


def main():
    app = Application.builder().token(token=BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("money", money))
    #app.add_handler(CommandHandler("casino", casino))
    # app.add_handler(CommandHandler("find", find))
    app.add_handler(CommandHandler("play", help_command))
    app.add_handler(CommandHandler("music", music))
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('find', find)],
        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, find)],
            2: [MessageHandler(filters.TEXT & ~filters.COMMAND, reader_find)]
        },
        fallbacks=[CommandHandler('stop', stop)]
    )
    conv_handler1 = ConversationHandler(
        entry_points=[CommandHandler('casino', casino)],
        states={
            3: [MessageHandler(filters.TEXT & ~filters.COMMAND, casino)],
            4: [MessageHandler(filters.TEXT & ~filters.COMMAND, casino2)]
        },
        fallbacks=[CommandHandler('stop', stop)]
    )
    conv_handler2 = ConversationHandler(
        entry_points=[CommandHandler('joke', joke)],
        states={
            5: [MessageHandler(filters.TEXT & ~filters.COMMAND, joke)],
            6: [MessageHandler(filters.TEXT & ~filters.COMMAND, joke2)]
        },
        fallbacks=[CommandHandler('stop', stop)]
    )
    app.add_handler(conv_handler)
    app.add_handler(conv_handler1)
    app.add_handler(conv_handler2)
    text_handler = MessageHandler(filters.TEXT, echo)
    app.add_handler(text_handler)
    app.run_polling()


if __name__ == "__main__":
    main()
